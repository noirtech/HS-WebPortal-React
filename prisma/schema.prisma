// This is your Prisma schema file for SQL Server
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ============================================================================
// TENANCY & AUTHENTICATION
// ============================================================================

model MarinaGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  marinas     Marina[]
  users       User[]
  
  @@map("marina_groups")
}

model Marina {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique
  address       String?
  phone         String?
  email         String?
  timezone      String   @default("UTC")
  isActive      Boolean  @default(true)
  isOnline      Boolean  @default(true)
  lastSyncAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Foreign Keys
  marinaGroupId String
  marinaGroup   MarinaGroup @relation(fields: [marinaGroupId], references: [id])
  
  // Relationships
  users         User[]
  userRoles     UserRole[]
  customers    Customer[]
  boats         Boat[]
  contracts     Contract[]
  berths        Berth[]
  bookings      Booking[]
  invoices      Invoice[]
  payments      Payment[]
  workOrders    WorkOrder[]
  pendingOps    PendingOperation[]
  auditEvents   AuditEvent[]
  notifications Notification[]
  
  @@map("marinas")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phone       String?
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String?
  marinaGroupId String?
  
  // Relationships
  marina      Marina? @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  marinaGroup MarinaGroup? @relation(fields: [marinaGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Role-based access control
  roles       UserRole[]
  auditEvents AuditEvent[]
  notifications Notification[]
  pendingOperations PendingOperation[]
  
  @@map("users")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      String   // Changed from enum to String
  marinaId  String?
  createdAt DateTime @default(now())
  
  // Foreign Keys
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  marina    Marina?  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([userId, role, marinaId])
  @@map("user_roles")
}

// ============================================================================
// DOMAIN MODELS
// ============================================================================

model Customer {
  id          String   @id @default(cuid())
  externalId  String   @unique
  firstName   String
  lastName   String
  email       String
  phone       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Relationships
  boats       Boat[]
  contracts   Contract[]
  invoices    Invoice[]
  payments    Payment[]
  bookings   Booking[]
  workOrders WorkOrder[]  // This will now relate to owner field in WorkOrder
  
  @@map("customers")
}

model Boat {
  id          String   @id @default(cuid())
  externalId  String   @unique
  name        String
  registration String?
  length      Float
  beam        Float?
  draft       Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  customerId  String
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contracts   Contract[]
  bookings    Booking[]
  workOrders  WorkOrder[]
  
  @@map("boats")
}

model Contract {
  id          String   @id @default(cuid())
  externalId  String   @unique
  contractNumber String @unique
  startDate   DateTime
  endDate     DateTime
  status      String   // Changed from enum to String
  monthlyRate Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  customerId  String
  boatId      String
  berthId     String?
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  boat        Boat    @relation(fields: [boatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  berth       Berth?  @relation(fields: [berthId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices    Invoice[]
  
  @@map("contracts")
}

model Berth {
  id          String   @id @default(cuid())
  externalId  String   @unique
  berthNumber String
  length      Float
  beam        Float?
  isAvailable Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Relationships
  contracts   Contract[]
  bookings   Booking[]
  
  @@map("berths")
}

model Booking {
  id          String   @id @default(cuid())
  externalId  String   @unique
  startDate   DateTime
  endDate     DateTime
  status      String   // Changed from enum to String
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  customerId  String
  boatId      String
  berthId     String?
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  boat        Boat    @relation(fields: [boatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  berth       Berth?  @relation(fields: [berthId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices    Invoice[]
  
  @@map("bookings")
}

model Invoice {
  id          String   @id @default(cuid())
  externalId  String   @unique
  invoiceNumber String @unique
  issueDate   DateTime
  dueDate     DateTime
  status      String   // Changed from enum to String
  subtotal    Float
  tax         Float   @default(0)
  total       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  customerId  String
  contractId  String?
  bookingId   String?
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contract    Contract? @relation(fields: [contractId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  booking     Booking? @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments    Payment[]
  
  @@map("invoices")
}

model Payment {
  id          String   @id @default(cuid())
  externalId  String   @unique
  amount      Float
  paymentDate DateTime
  status      String   // Changed from enum to String
  gateway     String   // Changed from enum to String
  gatewayTransactionId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  customerId  String
  invoiceId   String
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("payments")
}

model WorkOrder {
  id          String   @id @default(cuid())
  externalId  String   @unique
  title       String
  description String?
  status      String   // Changed from enum to String
  priority    String   // Changed from enum to String
  requestedDate DateTime
  completedDate DateTime?
  totalCost   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys - Updated to match actual database structure
  marinaId    String
  ownerId     String  // Changed from customerId to ownerId
  boatId      String?
  
  // Relationships - Updated to match actual database structure
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner       Customer @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)  // Changed from customer to owner
  boat        Boat?   @relation(fields: [boatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("work_orders")
}

// ============================================================================
// OPERATIONS & AUDIT
// ============================================================================

model PendingOperation {
  id          String   @id @default(cuid())
  operationType String // Changed from enum to String
  status      String   // Changed from enum to String
  data        String   // JSON string for SQLite
  priority    Int      @default(0)
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  errorMessage String?
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  marinaId    String
  userId      String
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("pending_operations")
}

model AuditEvent {
  id          String   @id @default(cuid())
  eventType   String
  entityType  String
  entityId    String
  action      String
  oldValues   String?  // JSON string for SQLite
  newValues   String?  // JSON string for SQLite
  metadata    String?  // JSON string for SQLite
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Foreign Keys
  marinaId    String
  userId      String
  
  // Relationships
  marina      Marina  @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("audit_events")
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id          String   @id @default(cuid())
  type        String   // Changed from enum to String
  title       String
  message     String
  isRead      Boolean  @default(false)
  priority    String   // Changed from enum to String
  scheduledAt DateTime?
  sentAt      DateTime?
  metadata    String?  // JSON string for SQLite
  createdAt   DateTime @default(now())
  
  // Foreign Keys
  marinaId    String?
  userId      String
  
  // Relationships
  marina      Marina? @relation(fields: [marinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("notifications")
}
